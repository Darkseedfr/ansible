---
- hosts: all
  strategy: free
  vars:
    test_name: "neu_to_cus_13M_window_1_120sec_reno"
    destination_server: "23.99.226.16"
  tasks:

    - name: collect dstat
      command: dstat -lcidmpry -n --net-packets -t --output "/tmp/dstat_{{ ansible_hostname }}_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}.csv" 1 160
      async: 300
      poll: 0
      register: dstat
      # check when was the stats file last modified and compare to current unix timestamp - 30 seconds
      # therefore we only collect stats if stats were last collected longer than 30 sec ago
      # when: "ansible_date_time.epoch|int -30 > sar_data_stat.stat.mtime|int"
      # notify: prep sar file
    - name: collect tcpdump
      command: tcpdump -c 10000 -i any -s 100 -w "/tmp/tcpdump_{{ ansible_hostname }}_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}.pcap" host {{ destination_server }}
      become: yes
      async: 300
      poll: 0
      register: tcpdump
      # check when was the stats file last modified and compare to current unix timestamp - 30 seconds
      # therefore we only collect stats if stats were last collected longer than 30 sec ago
      # when: "ansible_date_time.epoch|int -30 > sar_data_stat.stat.mtime|int"
      # notify: prep sar file

    - name: run the iperf test
      command: iperf3 -t 120 -c {{ destination_server }} --get-server-output --log "/tmp/iperf_{{ ansible_hostname }}_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}.log"
      become: yes
      async: 300
      poll: 0
      register: iperf

    - name: wait till dstat has finished
      async_status:
        jid: "{{ dstat.ansible_job_id }}"
      register: dstat_result
      until: dstat_result.finished
      retries: 60

    - name: wait till iperf has finished
      async_status:
        jid: "{{ iperf.ansible_job_id }}"
      become: yes
      register: iperf_result
      until: iperf_result.finished
      retries: 60

    - name: find the generated dstat files
      find:
        paths: /tmp
        patterns: "*.csv"
      register: csv_files
    # - debug:
    #   msg: "{{ csv_files.files }}"

    - name: find the generated tcpdump files
      find:
        paths: /tmp
        patterns: "*.pcap"
      register: pcap_files

    - name: find the generated iperf log files
      find:
        paths: /tmp
        patterns: "*.log"
      register: iperf_files


    - name: fetch csv files
      fetch:
        src: "{{ item.path }}"
        dest: /tmp/{{ test_name }}/
        flat: yes
      with_items: "{{ csv_files.files }}"

    - name: fetch tcpdump files
      fetch:
        src: "{{ item.path }}"
        dest: /tmp/{{ test_name }}/
        flat: yes
      with_items: "{{ pcap_files.files }}"


    - name: fetch iperf log files
      fetch:
        src: "{{ item.path }}"
        dest: /tmp/{{ test_name }}/
        flat: yes
      with_items: "{{ iperf_files.files }}"

    - name: delete the dstat csv files on the server
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ csv_files.files }}"
    - name: delete the pcap files on the server
      file:
        path: "{{ item.path }}"
        state: absent
      become: yes
      with_items: "{{ pcap_files.files }}"
    - name: delete the iperf log files on the server
      file:
        path: "{{ item.path }}"
        state: absent
      become: yes
      with_items: "{{ iperf_files.files }}"
